parameters:
  BuildToPackage: current
  DoFreethreaded: false

jobs:
- job: Make_Layouts
  displayName: Make layouts

  pool:
    vmImage: windows-2022

  workspace:
    clean: all

  variables:
    PYTHONHOME: $(Build.SourcesDirectory)

  strategy:
    matrix:
      win32:
        Name: win32
        DebugName: win32_d
        Arch: win32
        TclLibrary: tcltk_lib_win32
        ExtraOptions: ''
      amd64:
        Name: amd64
        DebugName: amd64_d
        Arch: amd64
        TclLibrary: tcltk_lib_amd64
        ExtraOptions: ''
      arm64:
        Name: arm64
        DebugName: arm64_d
        Arch: arm64
        HostArch: amd64
        TclLibrary: tcltk_lib_arm64
        ExtraOptions: ''
      ${{ if eq(parameters.DoFreethreaded, 'true') }}:
        win32_t:
          Name: win32_t
          DebugName: win32_td
          Arch: win32
          HostArch: win32
          TclLibrary: tcltk_lib_win32
          ExtraOptions: --include-freethreaded
        amd64_t:
          Name: amd64_t
          DebugName: amd64_td
          Arch: amd64
          HostArch: amd64
          TclLibrary: tcltk_lib_amd64
          ExtraOptions: --include-freethreaded
        arm64_t:
          Name: arm64_t
          DebugName: arm64_td
          Arch: arm64
          HostArch: amd64
          TclLibrary: tcltk_lib_arm64
          ExtraOptions: --include-freethreaded

  steps:
  - template: ./checkout.yml

  - task: DownloadPipelineArtifact@2
    displayName: 'Download artifact: bin_$(Name)'
    inputs:
      ${{ if eq(parameters.BuildToPackage, 'current') }}:
        buildType: current
      ${{ else }}:
        buildType: specific
        buildVersionToDownload: specific
        project: $(resources.pipeline.build_to_package.projectId)
        pipeline: $(resources.pipeline.build_to_package.pipelineId)
        runId: $(resources.pipeline.build_to_package.runID)
      artifact: bin_$(Name)
      targetPath: $(Pipeline.Workspace)\bin_$(Name)

  - task: DownloadPipelineArtifact@2
    displayName: 'Download artifact: bin_$(DebugName)'
    inputs:
      ${{ if eq(parameters.BuildToPackage, 'current') }}:
        buildType: current
      ${{ else }}:
        buildType: specific
        buildVersionToDownload: specific
        project: $(resources.pipeline.build_to_package.projectId)
        pipeline: $(resources.pipeline.build_to_package.pipelineId)
        runId: $(resources.pipeline.build_to_package.runID)
      artifact: bin_$(DebugName)
      targetPath: $(Pipeline.Workspace)\bin_$(DebugName)

  - powershell: |
      $dest = "$(Pipeline.Workspace)\bin_$(Name)"
      dir "$(Pipeline.Workspace)\bin_$(DebugName)" | `
      ?{ -not (Test-Path "$dest\$($_.Name)") } | `
      %{ copy $_.FullName $dest }
    displayName: 'Copy debug binaries'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download artifact: doc'
    inputs:
      ${{ if eq(parameters.BuildToPackage, 'current') }}:
        buildType: current
      ${{ else }}:
        buildType: specific
        buildVersionToDownload: specific
        project: $(resources.pipeline.build_to_package.projectId)
        pipeline: $(resources.pipeline.build_to_package.pipelineId)
        runId: $(resources.pipeline.build_to_package.runID)
      artifact: doc
      targetPath: $(Pipeline.Workspace)\doc

  - task: DownloadPipelineArtifact@2
    displayName: 'Download artifact: $(TclLibrary)'
    condition: and(succeeded(), variables['TclLibrary'])
    inputs:
      ${{ if eq(parameters.BuildToPackage, 'current') }}:
        buildType: current
      ${{ else }}:
        buildType: specific
        buildVersionToDownload: specific
        project: $(resources.pipeline.build_to_package.projectId)
        pipeline: $(resources.pipeline.build_to_package.pipelineId)
        runId: $(resources.pipeline.build_to_package.runID)
      artifact: $(TclLibrary)
      targetPath: $(Pipeline.Workspace)\$(TclLibrary)

  - powershell: |
      Write-Host "##vso[task.setvariable variable=TCL_LIBRARY]$(Pipeline.Workspace)\$(TclLibrary)\tcl8"
    displayName: 'Update TCL_LIBRARY'
    condition: and(succeeded(), variables['TclLibrary'])

  - powershell: |
      copy "$(Pipeline.Workspace)\bin_$(Name)\Activate.ps1" Lib\venv\scripts\common\Activate.ps1 -Force
    displayName: 'Copy signed files into sources'
    condition: and(succeeded(), variables['SigningCertificate'])

  - template: ./layout-command.yml
    parameters:
      BuildToPackage: ${{ parameters.BuildToPackage }}

  - powershell: |
      $(LayoutCmd) --copy "$(Build.ArtifactStagingDirectory)\layout" --preset-default $(ExtraOptions)
    displayName: 'Generate full layout'

  - publish: '$(Build.ArtifactStagingDirectory)\layout'
    artifact: layout_full_$(Name)
    displayName: 'Publish Artifact: layout_full_$(Name)'
