parameters:
  DoFreethreaded: false

jobs:
- job: Test_MSI
  displayName: Test MSI

  pool:
    vmImage: windows-2022

  workspace:
    clean: all

  variables:
    ${{ if eq(parameters.DoFreethreaded, 'true') }}:
      IncludeFreethreadedOpt: Include_freethreaded=1
    ${{ else }}:
      IncludeFreethreadedOpt: ''

  strategy:
    matrix:
      win32_User:
        ExeMatch: 'python-[\dabrc.]+\.exe'
        Logs: $(Build.ArtifactStagingDirectory)\logs\win32_User
        InstallAllUsers: 0
      win32_Machine:
        ExeMatch: 'python-[\dabrc.]+\.exe'
        Logs: $(Build.ArtifactStagingDirectory)\logs\win32_Machine
        InstallAllUsers: 1
      amd64_User:
        ExeMatch: 'python-[\dabrc.]+-amd64\.exe'
        Logs: $(Build.ArtifactStagingDirectory)\logs\amd64_User
        InstallAllUsers: 0
      amd64_Machine:
        ExeMatch: 'python-[\dabrc.]+-amd64\.exe'
        Logs: $(Build.ArtifactStagingDirectory)\logs\amd64_Machine
        InstallAllUsers: 1

  steps:
  - checkout: self

  - task: DownloadPipelineArtifact@1
    displayName: 'Download artifact: msi'
    inputs:
      artifactName: msi
      targetPath: $(Build.BinariesDirectory)\msi

  - powershell: |
      $p = (gci -r *.exe | ?{ $_.Name -match '$(ExeMatch)' } | select -First 1)
      Write-Host "##vso[task.setvariable variable=SetupExe]$($p.FullName)"
      Write-Host "##vso[task.setvariable variable=SetupExeName]$($p.Name)"
    displayName: 'Find installer executable'
    workingDirectory: $(Build.BinariesDirectory)\msi

  - powershell: >
      docker run --rm
      -v ('{0}:C:\msi' -f (Split-Path -Parent "$(SetupExe)"))
      -v ('{0}:C:\scripts' -f (gi windows-release))
      -v ('{0}:C:\Python' -f (mkdir "$(Build.BinariesDirectory)\tmp" -Force))
      -v ('{0}:C:\logs' -f (mkdir "$(Logs)" -Force))
      -e InstallAllUsers
      -e IncludeFreethreadedOpt
      -e SkipTests
      -e SkipTkTests
      mcr.microsoft.com/windows/servercore:ltsc2022
      powershell C:\scripts\test-msi.ps1 "C:\msi\$(SetupExeName)"
    displayName: 'Run installer tests'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    condition: true
    continueOnError: true
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\logs'
      ArtifactName: msi_testlogs
