parameters:
  ARM64TclTk: true

jobs:
- job: Make_MSIX_Layout
  displayName: Make MSIX layout

  pool:
    vmImage: windows-2022

  workspace:
    clean: all

  variables:
    PYTHONHOME: $(Build.SourcesDirectory)

  strategy:
    matrix:
      #win32:
      #  Name: win32
      #  TclLibrary: tcltk_lib_win32
      #  ExtraOptions: --precompile
      amd64:
        Name: amd64
        Arch: amd64
        TclLibrary: tcltk_lib_amd64
        ExtraOptions: --precompile
      arm64:
        Name: arm64
        Arch: arm64
        HostArch: amd64
        ExtraOptions: --precompile
        ${{ if eq(parameters.ARM64TclTk, 'true') }}:
          TclLibrary: tcltk_lib_arm64

  steps:
  - template: ./checkout.yml

  - download: current
    artifact: bin_$(Name)
    displayName: 'Download artifact: bin_$(Name)'

  - download: current
    artifact: $(TclLibrary)
    displayName: 'Download artifact: $(TclLibrary)'
    condition: and(succeeded(), variables['TclLibrary'])

  - powershell: |
      Write-Host "##vso[task.setvariable variable=TCL_LIBRARY]$(Pipeline.Workspace)\$(TclLibrary)\tcl8"
    displayName: 'Update TCL_LIBRARY'
    condition: and(succeeded(), variables['TclLibrary'])

  - download: current
    artifact: cert
    displayName: 'Download artifact: cert'
    condition: and(succeeded(), variables['SigningCertificate'])

  - powershell: |
      copy "$(Pipeline.Workspace)\bin_$(Name)\Activate.ps1" Lib\venv\scripts\common\Activate.ps1 -Force
    displayName: 'Copy signed files into sources'
    condition: and(succeeded(), variables['SigningCertificate'])

  - template: ./layout-command.yml

  - powershell: |
     Remove-Item "$(Build.ArtifactStagingDirectory)\appx-store" -Recurse -Force -EA 0
      $(LayoutCmd) --copy "$(Build.ArtifactStagingDirectory)\appx-store" --preset-appx $(ExtraOptions)
    displayName: 'Generate store APPX layout'
    env:
      TCL_LIBRARY: $(TclLibrary)

  # The dotnet sign tool shouldn't need this, but we do because of the sccd file
  - powershell: |
      $info = (gc "$(Pipeline.Workspace)\cert\certinfo.json" | ConvertFrom-JSON)
      Write-Host "Side-loadable APPX must be signed with '$($info.Subject)'"
      Write-Host "##vso[task.setvariable variable=APPX_DATA_PUBLISHER]$($info.Subject)"
      Write-Host "##vso[task.setvariable variable=APPX_DATA_SHA256]$($info.SHA256)"
    displayName: 'Override signing parameters'
    condition: and(succeeded(), variables['SigningCertificate'])

  - powershell: |
      Remove-Item "$(Build.ArtifactStagingDirectory)\appx" -Recurse -Force -EA 0
      $(LayoutCmd) --copy "$(Build.ArtifactStagingDirectory)\appx" --preset-appx --include-symbols --include-tests $(ExtraOptions)
    displayName: 'Generate sideloading APPX layout'
    env:
      TCL_LIBRARY: $(TclLibrary)

  - publish: '$(Build.ArtifactStagingDirectory)\appx-store'
    artifact: layout_appxstore_$(Name)
    displayName: 'Publish Artifact: layout_appxstore_$(Name)'

  - publish: '$(Build.ArtifactStagingDirectory)\appx'
    artifact: layout_appx_$(Name)
    displayName: 'Publish Artifact: layout_appx_$(Name)'
