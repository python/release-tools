parameters:
  PGInstrument: false
  PGRun: false
  PGUpdate: false

steps:
- template: ./checkout.yml

- ${{ if or(eq(parameters.PGInstrument, 'true'), eq(parameters.PGUpdate, 'true')) }}:
  - template: ./acquire-vcruntime.yml

  - powershell: |
      $d = (.\PCbuild\build.bat -V) | %{ if($_ -match '\s+(\w+):\s*(.+)\s*$') { @{$Matches[1] = $Matches[2];} }};
      Write-Host "##vso[task.setvariable variable=VersionText]$($d.PythonVersion)"
      Write-Host "##vso[task.setvariable variable=VersionNumber]$($d.PythonVersionNumber)"
      Write-Host "##vso[task.setvariable variable=VersionHex]$($d.PythonVersionHex)"
      Write-Host "##vso[task.setvariable variable=VersionUnique]$($d.PythonVersionUnique)"
      Write-Host "##vso[build.addbuildtag]$($d.PythonVersion)"
      Write-Host "##vso[build.addbuildtag]$($d.PythonVersion)-$(Name)"
    displayName: 'Extract version numbers'

- ${{ if eq(parameters.PGInstrument, 'true') }}:
  - powershell: |
      $env:SigningCertificate = $null
      .\PCbuild\build.bat -v -p $(Platform) -c PGInstrument $(ExtraOptions)
    displayName: 'Run build'
    env:
      IncludeUwp: true
      Py_OutDir: '$(Build.BinariesDirectory)\bin'

  - ${{ if ne(parameters.PGRun, 'true') }}:
    # Not running in this job, so we publish our entire build and object files

    - publish: '$(Build.BinariesDirectory)\bin\$(Arch)\instrumented'
      artifact: instrumented_bin_$(Name)
      displayName: 'Publish binaries for profiling'

    - powershell: |
        if ((Test-Path Python\frozen_modules) -and (Test-Path Python\deepfreeze)) {
            move Python\frozen_modules, Python\deepfreeze PCbuild\obj\
        }
      displayName: 'Preserve frozen_modules'

    - publish: '$(Build.SourcesDirectory)\PCbuild\obj'
      artifact: instrumented_obj_$(Name)
      displayName: 'Download artifact: instrumented_obj_$(Name)'


- ${{ if eq(parameters.PGRun, 'true') }}:
  - ${{ if ne(parameters.PGInstrument, 'true') }}:
    # Didn't build in this job, so download the required binaries
    - task: DownloadPipelineArtifact@2
      displayName: 'Download artifact: instrumented_bin_$(Name)'
      inputs:
        buildType: current
        artifact: instrumented_bin_$(Name)
        targetPath: '$(Build.BinariesDirectory)\bin\$(Arch)\instrumented'

  - powershell: |
      $exe = (gci "$(Build.BinariesDirectory)\bin\$(Arch)\instrumented\$(PythonExePattern)" | select -First 1)
      & $exe -m test --pgo
    ignoreLASTEXITCODE: true
    displayName: 'Collect profile'
    env:
      PYTHONHOME: '$(Build.SourcesDirectory)'


  - ${{ if ne(parameters.PGUpdate, 'true') }}:
    # Not finishing in this job, so publish the binaries
    - publish: '$(Build.BinariesDirectory)\bin\$(Arch)\instrumented'
      artifact: profile_bin_$(Name)
      displayName: 'Publish collected data and binaries'


- ${{ if eq(parameters.PGUpdate, 'true') }}:
  - ${{ if ne(parameters.PGRun, 'true') }}:
    # Didn't run/build in this job, so download files
    - task: DownloadPipelineArtifact@2
      displayName: 'Download artifact: profile_bin_$(Name)'
      inputs:
        buildType: current
        artifact: profile_bin_$(Name)
        targetPath: '$(Build.BinariesDirectory)\bin\$(Arch)\instrumented'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download artifact: instrumented_obj_$(Name)'
      inputs:
        buildType: current
        artifact: instrumented_obj_$(Name)
        targetPath: '$(Build.SourcesDirectory)\PCbuild\obj'

    - powershell: |
        if (Test-Path PCbuild\obj\frozen_modules) {
            copy -force -r PCbuild\obj\frozen_modules\* (mkdir -Force Python\frozen_modules)
        }
        if (Test-Path PCbuild\obj\deepfreeze) {
            copy -force -r PCbuild\obj\deepfreeze\* (mkdir -Force Python\deepfreeze)
        }
      displayName: 'Restore frozen_modules'

  - powershell: |
      $env:SigningCertificate = $null
      .\PCbuild\build.bat -v -p $(Platform) -c PGUpdate $(ExtraOptions)
    displayName: 'Run build with PGO'
    env:
      IncludeUwp: true
      Py_OutDir: '$(Build.BinariesDirectory)\bin'

  - powershell: |
      $kitroot = (gp 'HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots\').KitsRoot10
      $tool = (gci -r "$kitroot\Bin\*\x64\signtool.exe" | sort FullName -Desc | select -First 1)
      if (-not $tool) {
        throw "SDK is not available"
      }
      Write-Host "##vso[task.prependpath]$($tool.Directory)"
    displayName: 'Add WinSDK tools to path'

  - powershell: |
      $env:SigningCertificate = $null
      $(_HostPython) PC\layout -vv -b "$(Build.BinariesDirectory)\bin" -t "$(Build.BinariesDirectory)\catalog" --catalog "${env:CAT}.cdf" --preset-default --arch $(Arch)
      makecat "${env:CAT}.cdf"
      del "${env:CAT}.cdf"
      if (-not (Test-Path "${env:CAT}.cat")) {
        throw "Failed to build catalog file"
      }
    displayName: 'Generate catalog'
    env:
      CAT: $(Build.BinariesDirectory)\bin\$(Arch)\python
      PYTHON_HEXVERSION: $(VersionHex)

  - powershell: |
      del instrumented -r -EA 0
      del *.pgc, *.pgd, *.exp
    displayName: 'Cleanup build'
    workingDirectory: '$(Build.BinariesDirectory)\bin\$(Arch)'

  - powershell: |
      copy "$(Build.SourcesDirectory)\Lib\venv\scripts\common\Activate.ps1" .
    displayName: 'Copy Powershell scripts from source'
    workingDirectory: '$(Build.BinariesDirectory)\bin\$(Arch)'

  - publish: '$(Build.BinariesDirectory)\bin\$(Arch)'
    artifact: $(Artifact)
    displayName: 'Publish binaries'
