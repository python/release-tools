parameters:
  ShouldPGO: false

steps:
- template: ./checkout.yml
- template: ./acquire-vcruntime.yml

- powershell: |
    $d = (.\PCbuild\build.bat -V) | %{ if($_ -match '\s+(\w+):\s*(.+)\s*$') { @{$Matches[1] = $Matches[2];} }};
    Write-Host "##vso[task.setvariable variable=VersionText]$($d.PythonVersion)"
    Write-Host "##vso[task.setvariable variable=VersionNumber]$($d.PythonVersionNumber)"
    Write-Host "##vso[task.setvariable variable=VersionHex]$($d.PythonVersionHex)"
    Write-Host "##vso[task.setvariable variable=VersionUnique]$($d.PythonVersionUnique)"
    Write-Host "##vso[build.addbuildtag]$($d.PythonVersion)"
    Write-Host "##vso[build.addbuildtag]$($d.PythonVersion)-$(Name)"
  displayName: 'Extract version numbers'

- ${{ if eq(parameters.ShouldPGO, 'false') }}:
  - powershell: |
      $env:SigningCertificate = $null
      .\PCbuild\build.bat -v -p $(Platform) -c $(Configuration) $(ExtraOptions)
    displayName: 'Run build'
    env:
      IncludeUwp: true
      Py_OutDir: '$(Build.BinariesDirectory)\bin'

- ${{ else }}:
  - powershell: |
      $env:SigningCertificate = $null
      .\PCbuild\build.bat -v -p $(Platform) --pgo $(ExtraOptions)
    displayName: 'Run build with PGO'
    env:
      IncludeUwp: true
      Py_OutDir: '$(Build.BinariesDirectory)\bin'

- powershell: |
    $kitroot = (gp 'HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots\').KitsRoot10
    $tool = (gci -r "$kitroot\Bin\*\x64\signtool.exe" | sort FullName -Desc | select -First 1)
    if (-not $tool) {
      throw "SDK is not available"
    }
    Write-Host "##vso[task.prependpath]$($tool.Directory)"
  displayName: 'Add WinSDK tools to path'

- powershell: |
    $env:SigningCertificate = $null
    $(_HostPython) PC\layout -vv -b "$(Build.BinariesDirectory)\bin" -t "$(Build.BinariesDirectory)\catalog" --catalog "${env:CAT}.cdf" --preset-default --arch $(Arch)
    makecat "${env:CAT}.cdf"
    del "${env:CAT}.cdf"
    if (-not (Test-Path "${env:CAT}.cat")) {
      throw "Failed to build catalog file"
    }
  displayName: 'Generate catalog'
  env:
    CAT: $(Build.BinariesDirectory)\bin\$(Arch)\python
    PYTHON_HEXVERSION: $(VersionHex)

- powershell: |
    del *.pgc, *.pgd, *.exp
  displayName: 'Cleanup binaries'
  workingDirectory: '$(Build.BinariesDirectory)\bin\$(Arch)'

- powershell: |
    copy "$(Build.SourcesDirectory)\Lib\venv\scripts\common\Activate.ps1" .
  displayName: 'Copy Powershell scripts from source'
  workingDirectory: '$(Build.BinariesDirectory)\bin\$(Arch)'

- publish: '$(Build.BinariesDirectory)\bin\$(Arch)'
  artifact: $(Artifact)
  displayName: 'Publish binaries'
