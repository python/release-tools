parameters:
  Binaries: $(Pipeline.Workspace)\bin_$(Name)
  Sources: $(Build.SourcesDirectory)
  Temp: $(Build.BinariesDirectory)\layout-temp
  Docs: $(Build.BinariesDirectory)\doc
  LayoutSources:
  BuildToPackage: current

steps:
- task: DownloadPipelineArtifact@2
  displayName: 'Download artifact: bin_$(HostArch)'
  condition: and(succeeded(), variables['HostArch'])
  inputs:
    ${{ if eq(parameters.BuildToPackage, 'current') }}:
      buildType: current
    ${{ else }}:
      buildType: specific
      buildVersionToDownload: specific
      project: $(resources.pipeline.build_to_package.projectId)
      pipeline: $(resources.pipeline.build_to_package.pipelineId)
      runId: $(resources.pipeline.build_to_package.runID)
    artifact: bin_$(HostArch)
    targetPath: $(Pipeline.Workspace)\bin_$(HostArch)

- powershell: |
    Write-Host "##vso[task.setvariable variable=Python]${{ parameters.Binaries }}\python.exe"
  condition: and(succeeded(), not(variables['HostArch']))
  displayName: 'Set Python command'

- powershell: |
    Write-Host "##vso[task.setvariable variable=Python]$(Pipeline.Workspace)\bin_$(HostArch)\python.exe"
  condition: and(succeeded(), variables['HostArch'])
  displayName: 'Set Python command'

- powershell: >
    $layout_cmd = '&
    "$(Python)"
    "{4}\PC\layout"
    -vv
    --source "{1}"
    --build "{0}"
    --arch "$(Arch)"
    --temp "{2}"
    --include-cat "{0}\python.cat"
    --doc-build "{3}"'
    -f (
    "${{ parameters.Binaries }}",
    "${{ parameters.Sources }}",
    "${{ parameters.Temp }}",
    "${{ parameters.Docs}}",
    "${{ coalesce(parameters.LayoutSources, parameters.Sources) }}");
    Write-Host "##vso[task.setvariable variable=LayoutCmd]$layout_cmd";
    Write-Host "Setting LayoutCmd=$layout_cmd"
  displayName: 'Set LayoutCmd'
